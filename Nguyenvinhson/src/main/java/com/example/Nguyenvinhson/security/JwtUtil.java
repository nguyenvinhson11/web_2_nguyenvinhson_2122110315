package com.example.Nguyenvinhson.security;

import com.example.Nguyenvinhson.config.JwtProperties;
import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import io.jsonwebtoken.security.SecurityException;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Date;

@Component
@RequiredArgsConstructor
public class JwtUtil {

    private final JwtProperties jwtProperties;
    private Key key;

    // ‚úÖ Kh·ªüi t·∫°o key t·ª´ chu·ªói secret
    @PostConstruct
    public void init() {
        
        this.key = Keys.hmacShaKeyFor(jwtProperties.getSecret().getBytes(StandardCharsets.UTF_8));

    }

    // ‚úÖ T·∫°o JWT token v·ªõi userId l√†m subject
    public String generateToken(Integer userId) {
        long now = System.currentTimeMillis();
        return Jwts.builder()
                .setSubject(String.valueOf(userId)) // üü¢ L∆∞u userId ·ªü subject
                .setIssuer(jwtProperties.getIssuer())
                .setAudience(jwtProperties.getAudience())
                .setIssuedAt(new Date(now))
                .setExpiration(new Date(now + jwtProperties.getExpiryMinutes() * 60 * 1000))
                .signWith(key, SignatureAlgorithm.HS256)
                .compact();
    }

    // ‚úÖ L·∫•y userId t·ª´ token (n·∫±m trong subject)
    public Integer extractUserId(String token) {
        Claims claims = getClaims(token);
        return Integer.parseInt(claims.getSubject());
    }

    // ‚ùå N·∫øu b·ªë kh√¥ng d√πng email ‚Üí n√™n b·ªè lu√¥n c√°i n√†y
    // public String extractUsername(String token) {
    //     return getClaims(token).getSubject(); // th·ª±c ra ch√≠nh l√† userId d·∫°ng string
    // }

    // ‚úÖ Ki·ªÉm tra token h·ª£p l·ªá
    public boolean validateToken(String token) {
        try {
            getClaims(token);
            System.out.println("‚úÖ Token h·ª£p l·ªá");
            return true;
        } catch (ExpiredJwtException e) {
            System.out.println("‚ùå Token h·∫øt h·∫°n: " + e.getMessage());
        } catch (UnsupportedJwtException e) {
            System.out.println("‚ùå Token kh√¥ng h·ªó tr·ª£: " + e.getMessage());
        } catch (MalformedJwtException e) {
            System.out.println("‚ùå Token sai ƒë·ªãnh d·∫°ng: " + e.getMessage());
        } catch (SecurityException e) {
            System.out.println("‚ùå Token kh√¥ng ƒë√∫ng ch·ªØ k√Ω: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Token r·ªóng ho·∫∑c null: " + e.getMessage());
        }
        return false;
    }
    

    // ‚úÖ L·∫•y to√†n b·ªô th√¥ng tin trong token
    private Claims getClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }
}
